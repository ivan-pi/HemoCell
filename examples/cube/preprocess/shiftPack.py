#!/usr/bin/env python3

import click
import os
import subprocess


@click.command(context_settings=dict(ignore_unknown_options=True))
@click.argument('offset', nargs=1, type=float)
@click.argument('bounds', nargs=3, type=float)
@click.option('--packer', type=click.Path(exists=True), default="./packCells",
              help="""Optional path to the `packCells` executable on the
              system.""")
@click.argument('args', nargs=-1, type=click.UNPROCESSED)
def shift_pack(offset,  bounds, packer, args):
    """Generate cell packings where cells are kept away with half the given
    OFFSET from the domain by BOUNDS (dx, dy, dz). The packing is generated by
    invoking `packCells` (provided by HemoCell) with reduced bounds of the
    domain by subtracting the given offset from each edge length. After the
    packing is generated for the reduced domain, the cells are shifted in x, y,
    and z direction to ensure a centred packing is obtained.

    Additional arguments ARGS are forwarded to `packCells`.
    """
    if offset < 0:
        raise click.UsageError(f"Negative offset: '{offset}' not supported.")

    bounds = [bound - offset for bound in bounds]
    if any(bound < 0 for bound in bounds):
        msg = f"The offset '{offset}' results in negative bounds: '{bounds}'."
        raise click.UsageError(msg)

    subprocess.run([packer, *args, *map(str, bounds)])

    tmp_file = 'tmp.pos'
    rbc_file = 'RBC.pos'

    with open(tmp_file, 'w') as outfile:
        with open(rbc_file, 'r') as infile:
            outfile.write(f'{next(infile)}')
            for line in infile:
                cell = list(map(float, line.split(' ')))
                cell = [*shift(cell[0:3], offset/2), *cell[3:]]
                cell = map(lambda x: round(x, 5), cell)
                outfile.write(f'{" ".join(map(str, cell))}\n')
    os.rename(tmp_file, rbc_file)


def shift(values, offset):
    for value in values:
        yield value + offset


if __name__ == "__main__":
    shift_pack()
